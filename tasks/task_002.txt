# Task ID: 2
# Title: Database Schema Design and Implementation
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Extend the existing Prisma schema and D1 database setup to support the application's core features. Build on the current user, credential, and session models already provided by the RedwoodSDK starter. Add new tables and relationships for profiles, boats, blog posts, diary entries, training logs, boat setups, events, comments, and other required entities, ensuring integration with the existing authentication/session system.
# Details:
1. Review the existing Prisma schema and models for users, credentials, and sessions.
2. Design and extend the schema to include:
   - Profiles (user_id, name, bio, location, experience_level, profile_picture, privacy_settings)
   - Boats (id, user_id, name, type, specifications)
   - Posts (id, user_id, title, content, category, status, published_at, created_at, updated_at)
   - Media (id, related_id, related_type, file_path, file_type, created_at)
   - Comments (id, user_id, related_id, related_type, content, created_at)
   - DiaryEntries (id, user_id, date, location, weather_conditions, training_type, duration, description, privacy_level)
   - TrainingHours (id, user_id, start_time, end_time, activity_type, intensity, goals, achievements)
   - BoatSetups (id, user_id, boat_id, name, equipment_config, sail_settings, rigging_specs, performance_notes, conditions)
   - Events (id, creator_id, title, description, start_time, end_time, location, category, participant_limit, visibility)
   - EventParticipants (event_id, user_id, status, registered_at)
   - CoachStudents (coach_id, student_id, assigned_at)
3. Create and run migration scripts for the D1 database using Prisma.
4. Implement or extend Prisma models and relationships as needed.
5. Seed the database with development data for all new tables.
6. Ensure all new models integrate with the existing authentication/session system (e.g., foreign keys to user IDs).
7. Update the Prisma client and RedwoodSDK configuration if necessary.

# Test Strategy:
Create unit tests for new and extended database models. Test CRUD operations for each new table. Verify relationships and foreign keys between tables. Test database migrations and rollbacks. Ensure proper indexing for performance optimization. Confirm that authentication/session flows continue to work with the extended schema.
